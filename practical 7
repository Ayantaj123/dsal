#include <iostream>
using namespace std;
class Tree {
    int a[20][20], v, e, visited[20] = {0};
public:
    void input();
    void display();
    void minimum();
};

void Tree::input() {
    cout << "Enter no. of branches: "; cin >> v;
    fill(&a[0][0], &a[0][0] + 20 * 20, 999);
    cout << "\nEnter no. of connections: "; cin >> e;
    for (int i = 0, l, u, w; i < e; i++) {
        cout << "Enter end branches & charge: ";
        cin >> l >> u >> w;
        a[l-1][u-1] = a[u-1][l-1] = w;
    }
}

void Tree::display() {
    cout << "\nAdjacency Matrix:\n";
    for (int i = 0; i < v; i++, cout << "\n")
        for (int j = 0; j < v; j++) cout << a[i][j] << " ";
}

void Tree::minimum() {
    int total = 0;
    visited[0] = 1;
    for (int count = 0, min, p, q; count < v - 1; count++) {
        min = 999;
        for (int i = 0; i < v; i++) if (visited[i])
            for (int j = 0; j < v; j++) if (!visited[j] && a[i][j] < min)
                min = a[i][j], p = i, q = j;
        visited[q] = 1;
        total += min;
        cout << "Min cost: " << p+1 << " -> " << q+1 << " with charge: " << min << endl;
    }
    cout << "Total min cost: " << total << endl;
}

int main() {
    Tree t;
    int ch;
    do {
        cout << "\n1.INPUT  2.DISPLAY  3.MINIMUM  4.EXIT\nEnter choice: ";
        cin >> ch;
        if (ch == 1) t.input();
        else if (ch == 2) t.display();
        else if (ch == 3) t.minimum();
    } while (ch != 4);
    return 0;
}
